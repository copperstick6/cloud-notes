Homework 6

1. Explain the difference between Infrastructure-as-Code (IaC) and Infrastrcture-as-a-Service (IaaS).

IaaS is usually a endpoint that you can use to manually provision services (a.k.a it's basically a web service you can make calls to create services)

IaC is a service in which you declare what needs to be provisioned, not how it gets provisioned.

Main difference between the two is IaaS allows you to configure how/what/when you want to get something provisioned, whereas in IaC, it just cares about provisioning your resources


2)  State whether following statement are True or False:
-  IaC cannot be used with PaaS
False. PaaS can use IaC to configure its stuff

-  CloudFormation is an example of IaC whereas Terraform is an example of PaaS
False. both are IaC

-  Elastic Beanstalk uses CloudFormation snippets to customize Infrastructure resources
Definitely not. CloudFormation uses EB snippets to customize infrastructure resources

3) Multiple choice. Select all that apply:
A DevOps person is someone who:
a)  Develops applications
b)  Develops and deploys applications
c)  Develops infrastructure code
d)  Uses PaaSes
e)  Uses CloudFormation

Can be all of the above depending on design choices

Not doing 4/5. Screw that.

Homework 7

1)  Explain how does Elastic Beanstalk bind applications to external services such as RDS instances?

EBS creates the RDS instance for you, and stores that data into the environment variables, and the developer uses those variables to connect to the database.

2)  Based on your experience of using Elastic Beanstalk, write advantages and disadvantages of usinga PaaS system for deploying applications. Be specific in your answer (refer to issues that youran into)

Advantages: It's easy to set up and configure. It was extremely easy to deploy that simple flask application, I ran into no issues with deployment
Disadvantages: It's hard to develop locally (had to delete/rerun the ebs instance)

3)  State whether following statements are True or False:
-  Elastic Beanstalk allows customization of underlying infrastructure resources
True. Configurable via .ebexttensions

-  CloudFormation and Elastic Beanstalk serve same purpose
False. Some Stuff done by EBS can also be done by CF, but CF does a lot more with provisioning since it is IaC

-  An application that is deployed using Elastic Beanstalk cannot be deployed using CloudFormation
False, You can specify a template with EB resources and deploy it using CF


-  Operations engineers are the main target users of Elastic Beanstalk
False. Developers are the main target users.


4) List the differences between deploying applications using Elastic Beanstalk and using CloudFormation

EB is easier to use and deploy, but you get less control over how it is deployed. CF grants you more control, but is harder to manage, as you have to do all the configuration youself

Not doing 5.

Elastic Beanstalk supports DevOps process because
a)  Application developers can perform application deployments
b)  It enables Operations Engineers to write testable operations scripts
c)  It supports creation of different application environments (dev/test/production)
d)  It supports binding of applications with managed services like RDS instances
e)  It uses CloudFormation internally

a,c,d


7) Consider your blogging solution from Midterm. Explain how can you use Elastic Beanstalk to deploy this blogging solution. Focus on key details in your answer.

Use EBS to bind to S3 service

8) Explain the key points of AWS IAM model as it relates to Elastic Beanstalk

User Policies- permissions that your IAM user needs to interact with EBS. EBS will use the permissions given to the IAM user when creating other AWS resources. EBS uses user permissions to launch all resources in an environment

Service Role- permissions needed by EBS to interact with other AWS services on your behalf. This role contains all the necessary permissions that allows EBS to call other AWS services without user intervention. This role is created by default when creating an environment

Instance Profile- Role and permissions granted to EC2 instance in your environment. This is used by EBS to upload logs to S3

9) Compare and contrast Elastic Beanstalk with Kubernetes

Beanstalk is PaaS whereas Kubernetes is CaaS.

Beanstalk automatically scales and balances based on the load generated. It does all the EC2 management for you. Kubernetes also autoscales based on load.


10) Give examples when you would prefer using each of the following systems over others:
-  EC2 - when you want to run a simple task
-  CloudFormation - when you're designing your system to handle a specific usecase, and want to share/reuse the configuration
-  Elastic Beanstalk - fast deployment in crunchtime when you don't need to have fancy configs/security



Homework 8

1)  In your own words explain what is meant by container scheduling.

Container Scheduling for Docker and other conainerized services is where each container can perform its own actions and jobs, but if it needs resources held by another container, it can take it directly from that container depending on the priority of the request.

2)  True or False:
-  Containers and VM are similar.
True. They are quite similar in the Containers also contain a sort of "VM" of the OS required.

-  CloudFormation and Kubernetes offer conceptually the same functionality.
False. They offer different functionalities. CF allows you to directly provision resources, whereas Kube is a way to manage containers

-  Google Cloud SQL and AWS RDS offer conceptually the same functionality.
Yep. Both are Relational databases

3) Explain with an example the binding issue as it pertains to containerized applications.

The two main issues are
1. Authorization: How do you grant permissions in your application containers to perform the required action on the managed instance?

2. Traffic Restriction: How do you restrict the network that can reach your managed data store instance?

For authorization, this can be solved with environment variables. Docker allows you to use ENV files, Kube uses variables in the pod.yaml file

Traffic restriction can be solved through either a firewall to give permissions to the app container, to use a sidecar proxy container, or to automate the manual approach to modify the firewall to receive traffic only from the container cluster.

4) The manual deployment steps given below keep your Cloud SQL instance wide-open.

Why is it so? Be specific in your answer.
We run the command: gcloud sql instances create instance1 --tier=db-f1-micro --authorized-networks=0.0.0.0/0

This allows authorized access to come in from 0.0.0.0/0, which is a CIDR mask that allows all traffic.


What steps would you take to ensure that your application deploys correctly AND the Cloud SQL is not wide open.

You can simply restrict this access to your server's IP address by using a CIDR mask during deployment. This will ensure that the database is only accessible with that server.

Not doing 5/6

7) Explain what is the controller loop in Kubernetes.

Controller loop is basically how things get done in Kubernetes. Basically if an action needs to occur, that is known as the desired state. If the desired state is not the same as the current state, Kubernetes will employ a reconciliatory action to make it the same state. This loop gets done all the time to ensure that actions that the user asks for actually occurs.

8)Consider the Backing services factor: https://12factor.net/backing-services
It says that your applications should be written such that it should be possible to swap out application's backing services. Think about your assignment 4 (Elastic Beantalk).
Was it possible for you to easily swap out a local database when developing your application,  with an RDS instance when deploying the application to Elastic Beanstalk?
No.

If not, what was the reason this was not possible?
I only had one version of mysql installed locally.
Explain how you will overcome the issues?
Spin up the required instance on RDS, since that's what EBS will run

Consider the Config factor: https://12factor.net/config

Explain why is it important to separate an application's configuration from its code.
Config can change, it allows you more flexibility for deployment if you want to change something.

What is the problem with using config files as a configuration mechanism?
You can accidentally push stuff into github and also they can be separated out very commonly if you have a lot of different sources


9) Multiple choice. Choose all those that apply.
 Docker-based containers are a good choice for writing Twelve-factor based web applications because:
 a) Docker containers allow defining application's configuration through ENV variables
 b) Docker uses image layering when building application's container images which helps with the Dependency management factor
 c) Docker containers can be orchestrated through Kubernetes
 d) Docker containers run as processes making them easy to scale up / scale down
 e) Docker containers are built using Dockerfile which provides a way to capture application's OS-level dependencies in addition to any language-level dependencies (which are captured through language-specific dependency files such as pom.xml, requirements.txt, package.json, etc.)

all of the above

10) With regards to Kubernetes explain following terms in your own words:
-  What is a Pod?
A pod represents a unite of deployment, which contains the container required, storage resources required, unique IP address, and how the container should be run

-  What is a Service?
A service defines a set of pods and a policy to access them

-  What is the purpose of Label mechanism?
A label mechanism is how Kubernetes identifies a certain Kubernetes object so that it can perform actions on it

-  What is Deployment Controller
A deployment controller creates a declarative model for creating/updating pods. It can be used to expose pods to the outside world



1)  In your own words describe what is the microservice architecture.
Microservice architecture is where you separate out your code into small little pieces and put them on separate servers. This allows you the flexibility to program in multiple different languages.
